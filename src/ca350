#!/usr/local/share/ca350/bin/python3.8
# -*- coding: utf-8 -*-

"""
Interface with a StorkAir CA350 on Home Assistant
Version 0.1 by adorobis[@]gmail[.]com
based on code from https://github.com/AlbertHakvoort/StorkAir-Zehnder-WHR-930-Domoticz-MQTT
Publish every 15 seconds the status on a MQTT comfoair/speed and comfoair/on topics
This is to integrate with FAN device type in Home Assistant deployed on FreeNAS jail
Listen on MQTT topic for commands to set the ventilation level
todo :
- set bypass temperature
- turn on/off intake and exhaust ventilators
- check on faulty messages
- serial check
The following packages are needed:
sudo pkg install py37-serial python3-pip python3-yaml
sudo pip3 install paho-mqtt
start script with python3.7 ca350
"""

import paho.mqtt.client as mqtt
import time
import serial
import sys
import configparser
import os

# Read configuration from ini file
config = configparser.ConfigParser()
config.read(os.path.dirname(os.path.abspath(__file__)) + '/config.ini')

# Service Configuration
SerialPort = config['DEFAULT']['SerialPort']                   # Serial port CA350 RS232 direct or via USB TTL adapter
refresh_interval = int(config['DEFAULT']['refresh_interval'])  # Interval in seconds at which data from RS232 will be polled
enablePcMode = config['DEFAULT']['enablePcMode'] == 'True'     # automatically enable PC Mode (disable comfosense)
debug = config['DEFAULT']['debug'] == 'True'

MQTTServer = config['MQTT']['MQTTServer']            # MQTT broker - IP
MQTTPort = int(config['MQTT']['MQTTPort'])           # MQTT broker - Port
MQTTKeepalive = int(config['MQTT']['MQTTKeepalive']) # MQTT broker - keepalive
MQTTUser = config['MQTT']['MQTTUser']                # MQTT broker - user - default: 0 (disabled/no authentication)
MQTTPassword = config['MQTT']['MQTTPassword']        # MQTT broker - password - default: 0 (disabled/no authentication)

HAEnableAutoDiscoveryFan = config['HA']['HAEnableAutoDiscoveryFan'] == 'True'         # Home Assistant send auto discovery for fan
HAEnableAutoDiscoverySensors = config['HA']['HAEnableAutoDiscoverySensors'] == 'True' # Home Assistant send auto discovery for temperatures
#Todo: HA AD Climate is work in progress
HAEnableAutoDiscoveryClimate = config['HA']['HAEnableAutoDiscoveryClimate'] == 'True' # Work in Progress: Home Assistant send auto discovery for climate


print("*****************************")
print("* CA350 MQTT Home Assistant *")
print("*****************************")
print("")

def debug_msg(message):
    if debug is True:
        print('{0} DEBUG: {1}'.format(time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime()), message))

def warning_msg(message):
    print('{0} WARNING: {1}'.format(time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime()), message))

def info_msg(message):
    print('{0} INFO: {1}'.format(time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime()), message))

# Get the checksum from the serial data (third to last byte)
def get_returned_checksum(serial_data):
    return serial_data[-3:-2]

# Calculate the checksum for a given byte string received from the serial connection.
# The checksum is calculated by adding all bytes (excluding start and end) plus 173.
# If the value 0x07 appears twice in the data area, only one 0x07 is used for the checksum calculation.
# If the checksum is greater than one byte, the least significant byte is used.
def calculate_checksum(serial_data_slice):
    checksum = 173
    seven_encountered = False

    for byte in serial_data_slice:
        if byte == 0x07:
            if not seven_encountered:
                seven_encountered = True  # Mark that we have encountered the first 0x07
            else:
                seven_encountered = False # Next one will be counted again
                continue  # Skip the seconds 0x07

        checksum += int(byte)

    return checksum.to_bytes(((checksum.bit_length() + 8) // 8), byteorder='big')[-1:]

# Calculate the length for a given byte string received from the serial connection.
# If the value 0x07 appears twice in the data area, only one 0x07 is used for the checksum calculation.
def calculate_length(serial_data_slice):
    length = 0
    seven_encountered = False

    for byte in serial_data_slice:
        if byte == 0x07:
            if not seven_encountered:
                seven_encountered = True  # Mark that we have encountered the first 0x07
            else:
                seven_encountered = False # Next one will be counted again
                continue  # Skip the seconds 0x07

        length += 1

    return length.to_bytes(1, byteorder='big')

# Filter the data from the serial connection to find the output we're looking for.
# The serial connection is sometimes busy with input/output from other devices (e. g. ComfoSense).
# Then, validate the checksum for the output we're looking for.
# Currently, the data returned is passed as a string, so we'll need to convert it back to bytes for easier handling.
def filter_and_validate(data, result_command):
    split_data = split_result(data)

    for line in split_data:
        if not (len(line) == 2 and line[0] == b'\x07' and line[1] == b'\xf3'):  # Check if it's not an ACK
            if (
                    len(line) >= 7 and
                    line[0:2] == b'\x07\xf0' and  # correct start
                    line[-2:] == b'\x07\x0f' and  # correct end
                    line[2:4] == result_command[0:2] # is it the return we're looking for
            ):
                # Validate length of data
                line_length = calculate_length(line[5:-3])  # Strip start, command, length, checksum and end
                if line[4:5] != line_length:
                    warning_msg('Incorrect length')
                    return None

                # Validate checksum
                returned_checksum = get_returned_checksum(line)
                calculated_checksum = calculate_checksum(line[2:-3])  # Strip start, checksum and end
                if returned_checksum != calculated_checksum:
                    warning_msg('Incorrect checksum')
                    return None

                return line[5:-3]  # Only return data, no start, end, length and checksum

    warning_msg('Expected return not found')
    return None

def on_message(client, userdata, message):
    #print("message check")
    msg_data = str(message.payload.decode("utf-8"))
    fan_level = -1
    if message.topic == "comfoair/ha_climate_mode/fan/set":
        selector = msg_data
        if selector == "off":
            print("comfoair/ha_climate_mode/fan/set is off (speed 10)")
            fan_level = 1
        elif selector == "low":
            print("comfoair/ha_climate_mode/fan/set is low (speed 20)")
            fan_level = 2
        elif selector == "medium":
            print("comfoair/ha_climate_mode/fan/set is medium (speed 30)")
            fan_level = 3
        elif selector == "high":
            print("comfoair/ha_climate_mode/fan/set is high (speed 40)")
            fan_level = 4
        else:
            print("comfoair/ha_climate_mode/fan/set got unkown value "+msg_data)
    elif message.topic == "comfoair/speed/set":
        selector = msg_data
        if selector == "10":
            print("comfoair/speed/set is 10")
            fan_level = 1
        elif "20" == selector:
            print("comfoair/speed/set is 20")
            fan_level = 2
        elif "30" == selector:
            print("comfoair/speed/set is 30")
            fan_level = 3
        elif "40" == selector:
            print("comfoair/speed/set is 40")
            fan_level = 4
    elif message.topic == "comfoair/ha_climate_mode/set":
        selector = msg_data
        if selector == "off":
            print("comfoair/on/set is 10")
            fan_level = 1
        elif selector == "fan_only":
            print("comfoair/on/set is 20")
            fan_level = 2
    elif message.topic == "comfoair/on/set":
        selector = msg_data
        if selector == "10":
            print("comfoair/on/set is 10")
            fan_level = 1
        elif selector == "20":
            print("comfoair/on/set is 20")
            fan_level = 2
    elif message.topic == "comfoair/comforttemp/set":
        comforttemp = int(float(msg_data))
        set_comfort_temperature(comforttemp)
        get_temp()
    else:
        print("Message "+message.topic+" with message: "+msg_data+" ignored")
    print('FanLevel ' + str(fan_level))
    if 0 <= fan_level <= 4:
        set_ventilation_level(fan_level)
        get_ventilation_status()

def publish_message(msg, mqtt_path):
    try:
        mqttc.publish(mqtt_path, payload=msg, qos=0, retain=True)
    except:
        warning_msg('Publishing message '+msg+' to topic '+mqtt_path+' failed.')
        warning_msg('Exception information:')
        warning_msg(sys.exc_info())
    else:
        time.sleep(0.1)
        debug_msg('published message {0} on topic {1} at {2}'.format(msg, mqtt_path, time.asctime(time.localtime(time.time()))))

def delete_message(mqtt_path):
    try:
        mqttc.publish(mqtt_path, payload="", qos=0, retain=False)
    except:
        warning_msg('Deleting topic ' + mqtt_path + ' failed.')
        warning_msg('Exception information:')
        warning_msg(sys.exc_info())
    else:
        time.sleep(0.1)
        debug_msg('delete topic {0} at {1}'.format(mqtt_path, time.asctime(time.localtime(time.time()))))

def serial_command(cmd):
    try:
        data = b''
        ser.write(cmd)
        time.sleep(2)

        while ser.inWaiting() > 0:
            data += ser.read(1)
        if len(data) > 0:
            return data
        else:
            return None
    except:
        warning_msg('Serial command write and read exception:')
        warning_msg(sys.exc_info())
        return None

# Write serial data for the given command and data.
# Start, end as well as the length and checksum are added automatically.
def send_command(command, data, expect_reply=True):
    start = b'\x07\xF0'
    end = b'\x07\x0F'
    if data is None:
        length = b'\x00'
        command_plus_data = command + length
    else:
        length_int = len(data)
        length = length_int.to_bytes(((length_int.bit_length() + 8) // 8), byteorder='big')[-1:]
        command_plus_data = command + length + data

    checksum = calculate_checksum(command_plus_data)

    cmd = start + command_plus_data + checksum + end

    result = serial_command(cmd)

    if expect_reply:
        if result:
            # Increment the command by 1 to get the expected result command
            result_command_int = int.from_bytes(command, byteorder='big') + 1
            result_command = result_command_int.to_bytes(2, byteorder='big')

            filtered_result = filter_and_validate(result, result_command)

            if filtered_result:
                ser.write(b'\x07\xF3')  # Send an ACK after receiving the correct result
                return filtered_result
    else:
        # TODO: Maybe check if there was an "ACK", but given the noise on the serial bus, not sure if that makes sense.
        return True

    return None

# Split the data at \x07\f0 (start) or \x07\xf3 (ACK)
def split_result(data):
    split_data = []
    line = b''

    for index in range(len(data)):
        byte = data[index:index+1]
        nextbyte = data[index+1:index+2]
        if index > 0 and len(data) > index+2 and (byte == b'\x07' and nextbyte == b'\xf0' or byte == b'\x07' and nextbyte == b'\xf3'):
            split_data.append(line)
            line = b''
        line += byte

    split_data.append(line)
    return split_data

def set_ventilation_level(nr):
    if 0 <= nr <= 4:
        data = send_command(b'\x00\x99', bytes([nr]), expect_reply=False)
    else:
        data = False
        warning_msg('Wrong parameter: {0}'.format(nr))

    if data:
        info_msg('Changed the ventilation to {0}'.format(nr))
        get_ventilation_status()
        get_fan_status()
    else:
        warning_msg('Changing the ventilation to {0} went wrong, received invalid data after the set command'.format(nr))
        time.sleep(2)
        set_ventilation_level(nr)
        get_ventilation_status()
        get_fan_status()

def set_fan_levels():
    data = send_command(b'\x00\xCF', b'\x00', expect_reply=False)

    if data:
        info_msg('Changed the fan levels')
        get_ventilation_levels()
        get_ventilation_status()
        get_fan_status()
    else:
        warning_msg('Changing the fan levels went wrong, received invalid data after the set command')
        time.sleep(2)
        set_fan_levels()
        get_ventilation_levels()
        get_ventilation_status()
        get_fan_status()

def set_pc_mode(nr):
    if 0 <= nr <= 4 and nr != 2:
        data = send_command(b'\x00\x9B', bytes([nr]))
    else:
        data = None
        warning_msg('Wrong parameter: {0}'.format(nr))

    if data:
        info_msg('Changed RS232 mode to {0}'.format(nr))
    else:
        warning_msg('Changing the RS232 mode went wrong')

def set_comfort_temperature(nr):
    if 15 <= nr <= 27:
        data = send_command(b'\x00\xD3', bytes([nr * 2 + 40]), expect_reply=False)
    else:
        data = None
        warning_msg('Wrong temperature provided: {0}. No changes made.'.format(nr))

    if data:
        info_msg('Changed comfort temperature to {0}'.format(nr))
        get_temp()
        get_bypass_status()
    else:
        warning_msg('Changing comfort temperature to {0} went wrong, did not receive an ACK after the set command'.format(nr))
        time.sleep(2)
        set_comfort_temperature(nr)

def get_temp():
    data = send_command(b'\x00\xD1', None)

    if data is None:
        warning_msg('get_temp function could not get serial data')
    else:
        if len(data) > 4:
            ComfortTemp = data[0] / 2.0 - 20
            OutsideAirTemp = data[1] / 2.0 - 20
            SupplyAirTemp = data[2] / 2.0 - 20
            ReturnAirTemp = data[3] / 2.0 - 20
            ExhaustAirTemp = data[4] / 2.0 - 20
            if 10 < ComfortTemp < 30:
                publish_message(msg=str(ComfortTemp), mqtt_path='comfoair/comforttemp')
                publish_message(msg=str(OutsideAirTemp), mqtt_path='comfoair/outsidetemp')
                publish_message(msg=str(SupplyAirTemp), mqtt_path='comfoair/supplytemp')
                publish_message(msg=str(ExhaustAirTemp), mqtt_path='comfoair/exhausttemp')
                publish_message(msg=str(ReturnAirTemp), mqtt_path='comfoair/returntemp')
                debug_msg('OutsideAirTemp: {0}, SupplyAirTemp: {1}, ReturnAirTemp: {2}, ExhaustAirTemp: {3}, ComfortTemp: {4}'.format(OutsideAirTemp, SupplyAirTemp, ReturnAirTemp, ExhaustAirTemp, ComfortTemp))
            else:
                warning_msg('get_temp returned bad temp data. Retrying in 2 sec')
                warning_msg('OutsideAirTemp: {0}, SupplyAirTemp: {1}, ReturnAirTemp: {2}, ExhaustAirTemp: {3}, ComfortTemp: {4}'.format(OutsideAirTemp, SupplyAirTemp, ReturnAirTemp, ExhaustAirTemp, ComfortTemp))
                time.sleep(2)
                get_temp()
        else:
            warning_msg('get_temp function: incorrect data received')

def get_ventilation_levels():
    data = send_command(b'\x00\xCD', None)

    if data is None:
        warning_msg('get_ventilation_levels function could not get serial data')
    else:
        if len(data) > 12:
            OutAbsent = data[0]
            OutLow = data[1]
            OutMid = data[2]
            InAbsent = data[3]
            InLow = data[4]
            InMid = data[5]
            OutHigh = data[10]
            InHigh = data[11]
            debug_msg('OutAbsent: {}, OutLow: {}, OutMid: {}, OutHigh: {}, InAbsent: {}, InLow: {}, InMid: {}, InHigh: {}'.format(OutAbsent, OutLow, OutMid, OutHigh, InAbsent, InLow, InMid, InHigh))
        else:
            warning_msg('get_ventilation_levels function data array too short')

def get_ventilation_status():
    data = send_command(b'\x00\xCD', None)

    if data is None:
        warning_msg('get_ventilation_status function could not get serial data')
    else:
        if len(data) > 9:
            ReturnAirLevel = data[6]
            SupplyAirLevel = data[7]
            FanLevel = data[8]
            IntakeFanActive = data[9]

            if IntakeFanActive == 1:
                StrIntakeFanActive = 'Yes'
            elif IntakeFanActive == 0:
                StrIntakeFanActive = 'No'
            else:
                StrIntakeFanActive = 'Unknown'

            debug_msg('ReturnAirLevel: {}, SupplyAirLevel: {}, FanLevel: {}, IntakeFanActive: {}'.format(ReturnAirLevel, SupplyAirLevel, FanLevel, StrIntakeFanActive))

            if FanLevel == 1:
                publish_message(msg='10', mqtt_path='comfoair/on/state')
                publish_message(msg='off', mqtt_path='comfoair/ha_climate_mode')
                publish_message(msg='off', mqtt_path='comfoair/ha_climate_mode/fan')
                publish_message(msg='20', mqtt_path='comfoair/speed/state')
            elif FanLevel == 2 or FanLevel == 3 or FanLevel == 4:
                publish_message(msg=str(FanLevel*10), mqtt_path='comfoair/speed/state')
                publish_message(msg='20', mqtt_path='comfoair/on/state')
                publish_message(msg='fan_only', mqtt_path='comfoair/ha_climate_mode')
                if FanLevel == 2:
                  publish_message(msg='low', mqtt_path='comfoair/ha_climate_mode/fan')
                elif FanLevel == 3:
                  publish_message(msg='medium', mqtt_path='comfoair/ha_climate_mode/fan')
                elif FanLevel == 4:
                  publish_message(msg='high', mqtt_path='comfoair/ha_climate_mode/fan')
            else:
                warning_msg('Wrong FanLevel value: {0}'.format(FanLevel))
                time.sleep(2)
                get_ventilation_status()
        else:
            warning_msg('get_ventilation_status function: incorrect data received')

def get_fan_status():
    data = send_command(b'\x00\x0B', None)

    if data is None:
        warning_msg('function get_fan_status could not get serial data')
    else:
        if len(data) > 5:
            IntakeFanSpeed  = data[0]
            ExhaustFanSpeed = data[1]
            IntakeFanRPM    = int.from_bytes(data[2:4], byteorder='big')
            ExhaustFanRPM   = int.from_bytes(data[4:6], byteorder='big')
            publish_message(msg=str(IntakeFanSpeed), mqtt_path='comfoair/intakefanspeed')
            publish_message(msg=str(ExhaustFanSpeed), mqtt_path='comfoair/exhaustfanspeed')
            publish_message(msg=str(IntakeFanRPM), mqtt_path='comfoair/intakefanrpm')
            publish_message(msg=str(ExhaustFanRPM), mqtt_path='comfoair/exhaustfanrpm')
            debug_msg('IntakeFanSpeed {0}%, ExhaustFanSpeed {1}%, IntakeAirRPM {2}, ExhaustAirRPM {3}'.format(IntakeFanSpeed, ExhaustFanSpeed, IntakeFanRPM, ExhaustFanRPM))
        else:
            warning_msg('function get_fan_status data array too short')

def get_bypass_status():
    data = send_command(b'\x00\xDF', None)

    if data is None:
        warning_msg('function get_bypass_status could not get serial data')
    else:
        if len(data) > 6:
            BypassStatus = data[3]
            SummerMode = data[6]
            publish_message(msg=str(BypassStatus), mqtt_path='comfoair/bypassstatus')
            if SummerMode == 1:
                publish_message(msg='Summer', mqtt_path='comfoair/bypassmode')
            else:
                publish_message(msg='Winter', mqtt_path='comfoair/bypassmode')
        else:
            warning_msg('function get_bypass_status data array too short')

def get_filter_status():
    data = send_command(b'\x00\xD9', None)

    if data is None:
        warning_msg('get_filter_status function could not get serial data')
    else:
        if len(data) > 16:
            if data[11] == 0:
                FilterStatus = 'Ok'
                FilterStatusBinary = 1
            elif data[11] == 1:
                FilterStatus = 'Full'
                FilterStatusBinary = 0
            else:
                FilterStatus = 'Unknown'
                FilterStatusBinary = 0
            publish_message(msg=str(FilterStatus), mqtt_path='comfoair/filterstatus')
            publish_message(msg=int(FilterStatusBinary), mqtt_path='comfoair/filterstatus_binary')
            debug_msg('FilterStatus: {0}'.format(FilterStatus))
        else:
            warning_msg('get_filter_status data array too short')

def recon():
    try:
        mqttc.reconnect()
        info_msg('Successfull reconnected to the MQTT server')
        topic_subscribe()
    except:
        warning_msg('Could not reconnect to the MQTT server. Trying again in 10 seconds')
        time.sleep(10)
        recon()

def topic_subscribe():
    try:
        mqttc.subscribe("comfoair/on/set", 0)
        info_msg('Successfull subscribed to the comfoair/on/set topic')
        mqttc.subscribe("comfoair/speed/set", 0)
        info_msg('Successfull subscribed to the comfoair/speed/set topic')
        mqttc.subscribe("comfoair/comforttemp/set", 0)
        info_msg('Successfull subscribed to the comfoair/comforttemp/set topic')
        mqttc.subscribe("comfoair/ha_climate_mode/set", 0)
        info_msg('Successfull subscribed to the comfoair/ha_climate_mode/set topic')
        mqttc.subscribe("comfoair/ha_climate_mode/fan/set", 0)
        info_msg('Successfull subscribed to the comfoair/ha_climate_mode/fan/set topic')
    except:
        warning_msg('There was an error while subscribing to the MQTT topic(s), trying again in 10 seconds')
        time.sleep(10)
        topic_subscribe()

def on_connect(client, userdata, flags, rc):
    publish_message("online","comfoair/status")
    if HAEnableAutoDiscoveryFan is True :
        info_msg('Home Assistant MQTT Autodiscovery Topic Set: homeassistant/fan/ca350_fan/config')
        publish_message('{"name":"ca350_fan","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","stat_t": "comfoair/on/state","cmd_t": "comfoair/on/set","spd_stat_t": "comfoair/speed/state","spd_cmd_t": "comfoair/speed/set","pl_on": "20","pl_off": "10","pl_lo_spd": "20","pl_med_spd": "30","pl_hi_spd": "40","spds": ["off","low","medium","high"]}',"homeassistant/fan/ca350_fan/config")
    else:
        delete_message("homeassistant/climate/ca350_fan/config")
    if HAEnableAutoDiscoverySensors is True :
        info_msg('Home Assistant MQTT Autodiscovery Topic Set: homeassistant/sensor/ca350_[nametemp]/config')
        publish_message('{"name":"ca350_outsidetemp","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","device_class":"temperature","state_topic":"comfoair/outsidetemp","unit_of_measurement":"°C"}',"homeassistant/sensor/ca350_outsidetemp/config")
        publish_message('{"name":"ca350_supplytemp","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","device_class":"temperature","state_topic":"comfoair/supplytemp","unit_of_measurement":"°C"}',"homeassistant/sensor/ca350_supplytemp/config")
        publish_message('{"name":"ca350_exhausttemp","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","device_class":"temperature","state_topic":"comfoair/exhausttemp","unit_of_measurement":"°C"}',"homeassistant/sensor/ca350_exhausttemp/config")
        publish_message('{"name":"ca350_returntemp","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","device_class":"temperature","state_topic":"comfoair/returntemp","unit_of_measurement":"°C"}',"homeassistant/sensor/ca350_returntemp/config")
        publish_message('{"name":"ca350_fan_speed_supply","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/intakefanrpm"}',"homeassistant/sensor/ca350_fan_speed_supply/config")
        publish_message('{"name":"ca350_fan_speed_exhaust","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/exhaustfanrpm"}',"homeassistant/sensor/ca350_fan_speed_exhaust/config")
        publish_message('{"name":"ca350_return_air_level","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/intakefanspeed"}',"homeassistant/sensor/ca350_return_air_level/config")
        publish_message('{"name":"ca350_supply_air_level","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/exhaustfanspeed"}',"homeassistant/sensor/ca350_supply_air_level/config")
        publish_message('{"name":"ca350_supply_fan","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/state"}',"homeassistant/sensor/ca350_supply_fan/config")
        publish_message('{"name":"ca350_filterstatus","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/filterstatus_binary"}',"homeassistant/binary_sensor/ca350_filterstatus/config")
        publish_message('{"name":"ca350_bypass_valve","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/bypassstatus"}',"homeassistant/binary_sensor/ca350_bypass_valve/config")
        publish_message('{"name":"ca350_summer_mode","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/bypassstatus"}',"homeassistant/binary_sensor/ca350_summer_mode/config")
    else:
        delete_message("homeassistant/sensor/ca350_outsidetemp/config")
        delete_message("homeassistant/sensor/ca350_supplytemp/config")
        delete_message("homeassistant/sensor/ca350_exhausttemp/config")
        delete_message("homeassistant/sensor/ca350_returntemp/config")
        delete_message("homeassistant/sensor/ca350_fan_speed_supply/config")
        delete_message("homeassistant/sensor/ca350_fan_speed_exhaust/config")
        delete_message("homeassistant/sensor/ca350_return_air_level/config")
        delete_message("homeassistant/sensor/ca350_supply_air_level/config")
        delete_message("homeassistant/sensor/ca350_supply_fan/config")
        delete_message("homeassistant/sensor/ca350_filterstatus/config")
        delete_message("homeassistant/sensor/ca350_bypass_valve/config")
        delete_message("homeassistant/sensor/ca350_summer_mode/config")
    #ToDo: Work in progress
    if HAEnableAutoDiscoveryClimate is True:
        info_msg('Home Assistant MQTT Autodiscovery Topic Set: homeassistant/climate/ca350_climate/config')
        publish_message('{"name":"ca350_climate","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","temp_cmd_t":"comfoair/comforttemp/set","temp_stat_t":"comfoair/comforttemp","curr_temp_t":"comfoair/supplytemp","min_temp":"15","max_temp":"27","temp_step":"1","modes":["off", "fan_only"],"mode_state_topic":"comfoair/ha_climate_mode","mode_command_topic":"comfoair/ha_climate_mode/set","fan_modes":["auto", "low", "medium", "high"],"fan_mode_state_topic":"comfoair/ha_climate_mode/fan","fan_mode_command_topic":"comfoair/ha_climate_mode/fan/set","temperature_unit":"C"}',"homeassistant/climate/ca350_climate/config")
    else:
        delete_message("homeassistant/climate/ca350_climate/config")
    topic_subscribe()

def on_disconnect(client, userdata, rc):
    if rc != 0:
        warning_msg('Unexpected disconnection from MQTT, trying to reconnect')
        recon()

###
# Main
###

# Connect to the MQTT broker
mqttc = mqtt.Client('CA350')
if  MQTTUser != False and MQTTPassword != False :
    mqttc.username_pw_set(MQTTUser,MQTTPassword)

# Define the mqtt callbacks
mqttc.on_connect = on_connect
mqttc.on_message = on_message
mqttc.on_disconnect = on_disconnect
mqttc.will_set("comfoair/status",payload="offline", qos=0, retain=True)


# Connect to the MQTT server
while True:
    try:
        mqttc.connect(MQTTServer, MQTTPort, MQTTKeepalive)
        break
    except:
        warning_msg('Can\'t connect to MQTT broker. Retrying in 10 seconds.')
        time.sleep(10)
        pass

# Open the serial port
try:
    ser = serial.Serial(port = SerialPort, baudrate = 9600, bytesize = serial.EIGHTBITS, parity = serial.PARITY_NONE, stopbits = serial.STOPBITS_ONE)
except:
    warning_msg('Opening serial port exception:')
    warning_msg(sys.exc_info())
else:
    if enablePcMode:
        set_pc_mode(3)
    else:
        set_pc_mode(0)  # If PC mode is disabled, deactivate it (in case it was activated in an earlier run)

    mqttc.loop_start()
    while True:
        try:
    #        get_ventilation_levels()
    #        set_fan_levels()
            get_temp()
            get_ventilation_status()
            get_filter_status()
            get_fan_status()
            get_bypass_status()
            time.sleep(refresh_interval)
            pass
        except KeyboardInterrupt:
            mqttc.loop_stop()
            ser.close()
            break


# End of program
