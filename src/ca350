#!/usr/local/share/ca350/bin/python3.8
# -*- coding: utf-8 -*-

"""
Interface with a StorkAir CA350 on Home Assistant
Version 0.1 by adorobis[@]gmail[.]com
based on code from https://github.com/AlbertHakvoort/StorkAir-Zehnder-WHR-930-Domoticz-MQTT
Publish every 15 seconds the status on a MQTT comfoair/speed and comfoair/on topics
This is to integrate with FAN device type in Home Assistant deployed on FreeNAS jail
Listen on MQTT topic for commands to set the ventilation level
todo :
- set bypass temperature
- turn on/off intake and exhaust ventilators
- check on faulty messages
- serial check
The following packages are needed:
sudo pkg install py37-serial python3-pip python3-yaml
sudo pip3 install paho-mqtt
start script with python3.7 ca350
"""

import paho.mqtt.client as mqtt
import time
import serial
import json
import sys
import configparser
import os

# Read configuration from ini file
config = configparser.ConfigParser()
config.read(os.path.dirname(os.path.abspath(__file__)) + '/config.ini')

# Service Configuration
SerialPort = config['DEFAULT']['SerialPort']                   # Serial port CA350 RS232 direct or via USB TTL adapter
refresh_interval = int(config['DEFAULT']['refresh_interval'])  # Interval in seconds at which data from RS232 will be polled
enablePcMode = config['DEFAULT']['enablePcMode'] == 'True'     # automatically enable PC Mode (disable comfosense)
debug = config['DEFAULT']['debug'] == 'True'

MQTTServer = config['MQTT']['MQTTServer']            # MQTT broker - IP
MQTTPort = int(config['MQTT']['MQTTPort'])           # MQTT broker - Port
MQTTKeepalive = int(config['MQTT']['MQTTKeepalive']) # MQTT broker - keepalive
MQTTUser = config['MQTT']['MQTTUser']                # MQTT broker - user - default: 0 (disabled/no authentication)
MQTTPassword = config['MQTT']['MQTTPassword']        # MQTT broker - password - default: 0 (disabled/no authentication)

HAEnableAutoDiscoveryFan = config['HA']['HAEnableAutoDiscoveryFan'] == 'True'         # Home Assistant send auto discovery for fan
HAEnableAutoDiscoverySensors = config['HA']['HAEnableAutoDiscoverySensors'] == 'True' # Home Assistant send auto discovery for temperatures
#Todo: HA AD Climate is work in progress
HAEnableAutoDiscoveryClimate = config['HA']['HAEnableAutoDiscoveryClimate'] == 'True' # Work in Progress: Home Assistant send auto discovery for climate


print("*****************************")
print("* CA350 MQTT Home Assistant *")
print("*****************************")
print("")

def debug_msg(message):
    if debug is True:
        print('{0} DEBUG: {1}'.format(time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime()), message))

def warning_msg(message):
    print('{0} WARNING: {1}'.format(time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime()), message))

def info_msg(message):
    print('{0} INFO: {1}'.format(time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime()), message))

def debug_data(serial_data):
    print('Ack           : {0} {1}'.format(serial_data[0], serial_data[1]))
    print('Start         : {0} {1}'.format(serial_data[2], serial_data[3]))
    print('Command       : {0} {1}'.format(serial_data[4], serial_data[5]))
    print('Nr data bytes : {0} (integer {1})'.format(serial_data[6], int(serial_data[6], 16)))

    n = 1
    while n <= int(serial_data[6], 16):
        print('Data byte {0}   : Hex: {1}, Int: {2}, Array #: {3}'.format(n, serial_data[n+6], int(serial_data[n + 6], 16), n + 6))

        n += 1
    
    print('Checksum      : {0}'.format(serial_data[-2]))
    print('End           : {0} {1}'.format(serial_data[-1], serial_data[-0]))


def on_message(client, userdata, message):
    #print("message check")
    msg_data = str(message.payload.decode("utf-8"))
    fan_level = -1
    if message.topic == "comfoair/ha_climate_mode/fan/set":
        selector = msg_data
        if selector == "off":
           print("comfoair/ha_climate_mode/fan/set is off (speed 10)")
           fan_level=1
        elif selector == "low":
           print("comfoair/ha_climate_mode/fan/set is low (speed 20)")
           fan_level=2
        elif selector == "medium":
           print("comfoair/ha_climate_mode/fan/set is medium (speed 30)")
           fan_level=3
        elif selector == "high":
           print("comfoair/ha_climate_mode/fan/set is high (speed 40)")
           fan_level=4
        else:
           print("comfoair/ha_climate_mode/fan/set got unkown value "+msg_data);
    elif message.topic == "comfoair/speed/set":
        selector = msg_data
        if selector == "10":
            print("comfoair/speed/set is 10")
            fan_level=1
        elif "20" == selector:
            print("comfoair/speed/set is 20")
            fan_level=2
        elif "30" == selector:
            print("comfoair/speed/set is 30")
            fan_level=3
        elif "40" == selector:
            print("comfoair/speed/set is 40")
            fan_level=4
    elif message.topic == "comfoair/ha_climate_mode/set":
        selector = msg_data
        if selector == "off":
            print("comfoair/on/set is 10")
            fan_level=1  
        elif selector == "fan_only":
            print("comfoair/on/set is 20")
            fan_level=2 
    elif message.topic == "comfoair/on/set":
        selector = msg_data
        if selector == "10":
            print("comfoair/on/set is 10")
            fan_level=1
        elif selector == "20":
            print("comfoair/on/set is 20")
            fan_level=2
    elif message.topic == "comfoair/comforttemp/set":
        comforttemp = int(float(msg_data))
        set_comfort_temperature(comforttemp)
        get_temp()
    else:
        print("Message "+message.topic+" with message: "+msg_data+" ignored")
    print('FanLevel ' + str(fan_level))
    if fan_level >= 0 and fan_level <= 4:
        set_ventilation_level(fan_level)
        get_ventilation_status()

def publish_message(msg, mqtt_path):                                                                      
    try:
      mqttc.publish(mqtt_path, payload=msg, qos=0, retain=True)
    except:
      warning_msg('Publishing message '+msg+' to topic '+mqtt_path+' failed.')
      warning_msg('Exception information:')
      warning_msg(sys.exc_info())
    else:
      time.sleep(0.1)
      debug_msg('published message {0} on topic {1} at {2}'.format(msg, mqtt_path, time.asctime(time.localtime(time.time()))))

def delete_message(mqtt_path):
    try:
        mqttc.publish(mqtt_path,payload="",qos=0,retain=False)
    except:
        warning_msg('Deleting topic '+mqtt_path+' failed.')
        warning_msg('Exception information:')
        warning_msg(sys.exc_info())
    else:
        time.sleep(0.1)
        debug_msg('delete topic {0} at {1}'.format(mqtt_path, time.asctime(time.localtime(time.time()))))

def serial_command(cmd):
    try:
        data = []
        ser.write(cmd)
        time.sleep(2)

        while ser.inWaiting() > 0:
            data.append(ser.read(1).hex())
        if len(data) > 0:
            return data
        else:
            return None
    except:
        warning_msg('Serial command write and read exception:')
        warning_msg(sys.exc_info())
        return None

def set_ventilation_level(nr):
    if nr == 0:
        data = serial_command(b'\x07\xF0\x00\x99\x01\x00\x47\x07\x0F')
    elif nr == 1:
        data = serial_command(b'\x07\xF0\x00\x99\x01\x01\x48\x07\x0F')
    elif nr == 2:
        data = serial_command(b'\x07\xF0\x00\x99\x01\x02\x49\x07\x0F')
    elif nr == 3:
        data = serial_command(b'\x07\xF0\x00\x99\x01\x03\x4A\x07\x0F')
    elif nr == 4:
        data = serial_command(b'\x07\xF0\x00\x99\x01\x04\x4B\x07\x0F')        

    if data:
        if ( data[0] == '07' and data[1] == 'f3' ):
            info_msg('Changed the ventilation to {0}'.format(nr))
            get_ventilation_status()
            get_fan_status()
        else:
            warning_msg('Changing the ventilation to {0} went wrong, did not receive an ACK after the set command'.format(nr))
            time.sleep(2)
            set_ventilation_level(nr)
            get_ventilation_status()
            get_fan_status()
    else:
        warning_msg('Changing the ventilation to {0} went wrong, did not receive an ACK after the set command'.format(nr))
        time.sleep(2)
        set_ventilation_level(nr)
        get_ventilation_status()
        get_fan_status()
def set_fan_levels():

#    data = serial_command(b'\x07\xF0\x00\xCF\x09\x0F\x19\x28\x0F\x19\x28\x46\x46\x00\xB0\x07\x0F')
    data = serial_command(b'\x07\xF0\x00\xCF\x09\x0E\x14\x28\x0E\x14\x28\x46\x46\x00\x9D\x07\x0F')

    if data:
        if ( data[0] == '07' and data[1] == 'f3' ):
            info_msg('Changed the fan levels')
            get_ventilation_levels()
            get_ventilation_status()
            get_fan_status()
        else:
            warning_msg('Changing the fan levels went wrong, did not receive an ACK after the set command')
            time.sleep(2)
            set_fan_levels()
            get_ventilation_levels()
            get_ventilation_status()
            get_fan_status()
    else:
        warning_msg('Changing the ventilation to {0} went wrong, did not receive an ACK after the set command')
        time.sleep(2)
        set_fan_levels()
        get_ventilation_levels()
        get_ventilation_status()
        get_fan_status()

def set_pc_mode(nr):
    if nr == 3:
        data = serial_command(b'\x07\xF0\x00\x9B\x01\x03\x4C\x07\x0F')
    elif nr == 0:
        data = serial_command(b'\x07\xF0\x00\x9B\x01\x00\x49\x07\x0F')
    elif nr == 1:
        data = serial_command(b'\x07\xF0\x00\x9B\x01\x01\x4A\x07\x0F')
    elif nr == 4:
        data = serial_command(b'\x07\xF0\x00\x9B\x01\x04\x4D\x07\x0F')
    else:
        warning_msg('Wrong parameter: {0}'.format(nr))    
    print(data)
    if data:
        if ( data[0] == '07' and data[1] == 'f3' ):
            print(data)
            info_msg('Changed RS232 mode to {0}'.format(nr))
        else:
            warning_msg('Changing the RS232 mode went wrong')

    else:
        warning_msg('Changing the RS232 mode went wrong')

def set_comfort_temperature(nr):
    if nr == 15:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x46\xC7\x07\x0F')
    elif nr == 16:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x48\xC9\x07\x0F')
    elif nr == 17:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x4A\xCB\x07\x0F')
    elif nr == 18:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x4C\xCD\x07\x0F')
    elif nr == 19:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x4E\xCF\x07\x0F')
    elif nr == 20:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x50\xD1\x07\x0F')
    elif nr == 21:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x52\xD3\x07\x0F')
    elif nr == 22:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x54\xD5\x07\x0F')
    elif nr == 23:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x56\xD7\x07\x0F')
    elif nr == 24:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x58\xD9\x07\x0F')
    elif nr == 25:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x5A\xDB\x07\x0F')        
    elif nr == 26:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x5C\xDD\x07\x0F')
    elif nr == 27:
        data = serial_command(b'\x07\xF0\x00\xD3\x01\x5E\xDF\x07\x0F')
    else:
        warning_msg('Wrong temperature provided: {0}. No changes made.'.format(nr))
    if data:
        if ( data[0] == '07' and data[1] == 'f3' ):
            info_msg('Changed comfort temperature to {0}'.format(nr))
            get_temp()
            get_bypass_status()
            
        else:
            warning_msg('Changing comfort temperature to {0} went wrong, did not receive an ACK after the set command'.format(nr))
            time.sleep(2)
            set_comfort_temperature(nr)
    else:
        warning_msg('Changing comfort temperature to {0} went wrong, did not receive an ACK after the set command'.format(nr))
        time.sleep(2)
        set_comfort_temperature(nr)
        
def get_temp():
    # 0x07 0xF0 0x00 0xD1 0x00 0x7E 0x07 0x0F 
    # Checksum: 0x7E(0x00 0xD1) = 0 + 209 + 0 + 173 = 382
    # End: 0x07 0x0F

    data = serial_command(b'\x07\xF0\x00\xD1\x00\x7E\x07\x0F')
    
    if data == None:
        warning_msg('get_temp function could not get serial data')
    else:
        if ( data[0] == '07' and data[1] == 'f3' ):
            if len(data) > 11:
                ComfortTemp = int(data[7], 16) / 2 - 20
                OutsideAirTemp = int(data[8], 16) / 2.0 - 20
                SupplyAirTemp = int(data[9], 16) / 2.0 - 20
                ReturnAirTemp = int(data[10], 16) / 2.0 - 20
                ExhaustAirTemp = int(data[11], 16) / 2.0 - 20
                if ComfortTemp > 10 and ComfortTemp < 30:
                    publish_message(msg=str(ComfortTemp), mqtt_path='comfoair/comforttemp')
                    publish_message(msg=str(OutsideAirTemp), mqtt_path='comfoair/outsidetemp')
                    publish_message(msg=str(SupplyAirTemp), mqtt_path='comfoair/supplytemp')
                    publish_message(msg=str(ExhaustAirTemp), mqtt_path='comfoair/exhausttemp')    
                    publish_message(msg=str(ReturnAirTemp), mqtt_path='comfoair/returntemp')
                    debug_msg('OutsideAirTemp: {0}, SupplyAirTemp: {1}, ReturnAirTemp: {2}, ExhaustAirTemp: {3}, ComfortTemp: {4}'.format(OutsideAirTemp, SupplyAirTemp, ReturnAirTemp, ExhaustAirTemp, ComfortTemp))
                else:
                    warning_msg('get_temp returned bad temp data. Retrying in 2 sec')
                    warning_msg('OutsideAirTemp: {0}, SupplyAirTemp: {1}, ReturnAirTemp: {2}, ExhaustAirTemp: {3}, ComfortTemp: {4}'.format(OutsideAirTemp, SupplyAirTemp, ReturnAirTemp, ExhaustAirTemp, ComfortTemp))
                    time.sleep(2)
                    get_temp()
            else:
                warning_msg('get_temp function data array too short')
        else:
            warning_msg('get_temp function wrong ACK message')
def get_ventilation_levels():
    # 0x07 0xF0 0x00 0xD1 0x00 0x7A 0x07 0x0F 
    # Checksum: 0x7A(0x00 0xCD) = 0 + 205 + 0 + 173 = 378
    # End: 0x07 0x0F

    data = serial_command(b'\x07\xF0\x00\xCD\x00\x7A\x07\x0F')
    
    if data == None:
        warning_msg('get_ventilation_levels function could not get serial data')
    else:
        if ( data[0] == '07' and data[1] == 'f3' ):
            if len(data) > 18:
                OutAbsent = int(data[7], 16)
                OutLow = int(data[8], 16)
                OutMid = int(data[9], 16)
                InAbsent = int(data[10], 16)
                InLow = int(data[11], 16)
                InMid = int(data[12], 16)
                OutHigh = int(data[17], 16)
                InHigh = int(data[18], 16)
                print("Serial ventilation levels data: "+str(data))
                print(str(OutAbsent))
                print(str(OutLow))
                print(str(OutMid))
                print(str(OutHigh))
                print(str(InAbsent))
                print(str(InLow))
                print(str(InMid))
                print(str(InHigh))
            else:
                warning_msg('get_ventilation_levels function data array too short')
        else:
            warning_msg('get_ventilation_levels function wrong ACK message')

def get_ventilation_status():
    data = serial_command(b'\x07\xF0\x00\xCD\x00\x7A\x07\x0F')

    if data == None:
        warning_msg('get_ventilation_status function could not get serial data')
    else:
        if ( data[0] == '07' and data[1] == 'f3' ):
            if len(data) > 16:
                ReturnAirLevel = int(data[13], 16)
                SupplyAirLevel = int(data[14], 16)
                FanLevel = int(data[15], 16)
                IntakeFanActive = int(data[16], 16)

                if IntakeFanActive == 1:
                    StrIntakeFanActive = 'Yes'
                elif IntakeFanActive == 0:
                    StrIntakeFanActive = 'No'
                else:
                    StrIntakeFanActive = 'Unknown'

                if FanLevel == 1:
                    publish_message(msg='10', mqtt_path='comfoair/on/state')
                    publish_message(msg='off', mqtt_path='comfoair/ha_climate_mode')
                    publish_message(msg='off', mqtt_path='comfoair/ha_climate_mode/fan')
                    publish_message(msg='20', mqtt_path='comfoair/speed/state')
                elif FanLevel == 2 or FanLevel == 3 or FanLevel == 4:
                    publish_message(msg=str(FanLevel*10), mqtt_path='comfoair/speed/state')
                    publish_message(msg='20', mqtt_path='comfoair/on/state')
                    publish_message(msg='fan_only', mqtt_path='comfoair/ha_climate_mode')
                    if FanLevel == 2:
                      publish_message(msg='low', mqtt_path='comfoair/ha_climate_mode/fan')
                    elif FanLevel == 3:
                      publish_message(msg='medium', mqtt_path='comfoair/ha_climate_mode/fan')
                    elif FanLevel == 4:
                      publish_message(msg='high', mqtt_path='comfoair/ha_climate_mode/fan')
                else:
                    warning_msg('Wrong FanLevel value: {0}'.format(FanLevel))
                    time.sleep(2)
                    get_ventilation_status()
            else:
                warning_msg('get_ventilation_status function data array too short')
                time.sleep(2)
                get_ventilation_status()
        else:
            warning_msg('get_ventilation_status function wrong ACK message')
            
#        info_msg('ReturnAirLevel: {}, SupplyAirLevel: {}, FanLevel: {}, IntakeFanActive: {}'.format(ReturnAirLevel, SupplyAirLevel, FanLevel, StrIntakeFanActive))

def get_fan_status():
    # 0x07 0xF0 0x00 0x0B 0x00 0xB8 0x07 0x0F 
    # Checksum: 0xB8 (0x00 0x0B) = 0 + 11 + 0 + 173 = 184
    # End: 0x07 0x0F

    data = serial_command(b'\x07\xF0\x00\x0B\x00\xB8\x07\x0F')

    if data == None:
        warning_msg('function get_fan_status could not get serial data')
    else:
        if ( data[0] == '07' and data[1] == 'f3' ):
            if len(data) > 8:
                IntakeFanSpeed  = int(data[7], 16)
                ExhaustFanSpeed = int(data[8], 16)  
                IntakeFanRPM    = int(data[9]+''+data[10], 16)
                ExhaustFanRPM   = int(data[11]+''+data[12], 16)
                publish_message(msg=str(IntakeFanSpeed), mqtt_path='comfoair/intakefanspeed')
                publish_message(msg=str(ExhaustFanSpeed), mqtt_path='comfoair/exhaustfanspeed')
                publish_message(msg=str(IntakeFanRPM), mqtt_path='comfoair/intakefanrpm')
                publish_message(msg=str(ExhaustFanRPM), mqtt_path='comfoair/exhaustfanrpm')
            else:
                warning_msg('function get_fan_status data array too short')
        else:
            warning_msg('function get_fan_status wrong ACK message')
#        debug_msg('IntakeFanSpeed {0}%, ExhaustFanSpeed {1}%, IntakeAirRPM {2}, ExhaustAirRPM {3}'.format(IntakeFanSpeed,ExhaustFanSpeed,IntakeFanRPM,ExhaustFanRPM))

def get_bypass_status():
    # 0x07 0xF0 0x00 0x0B 0x00 0xB8 0x07 0x0F 
    # Checksum: 0xB8 (0x00 0x0B) = 0 + 11 + 0 + 173 = 184
    # End: 0x07 0x0F

    data = serial_command(b'\x07\xF0\x00\xDF\x00\x8C\x07\x0F')

    if data == None:
        warning_msg('function get_bypass_status could not get serial data')
    else:
        if ( data[0] == '07' and data[1] == 'f3' ):
            if len(data) > 13:
                BypassStatus = int(data[10], 16)
                SummerMode = int(data[13],16)
                publish_message(msg=str(BypassStatus), mqtt_path='comfoair/bypassstatus')
                if SummerMode==1:
                    publish_message(msg='Summer', mqtt_path='comfoair/bypassmode')
                else:
                    publish_message(msg='Winter', mqtt_path='comfoair/bypassmode')
            else:
                warning_msg('function get_bypass_status data array too short')
        else:
            warning_msg('function get_bypass_status wrong ACK message')

def get_filter_status():
    # 0x07 0xF0 0x00 0xD9 0x00 0x86 0x07 0x0F 
    # Start: 0x07 0xF0
    # Command: 0x00 0xD9
    # Number data bytes: 0x00
    # Checksum: 0x86 (0x00 0xD9) = 0 + 217 + 0 + 173 = 390
    # End: 0x07 0x0F

    data = serial_command(b'\x07\xF0\x00\xD9\x00\x86\x07\x0F')

    if data == None:
        warning_msg('get_filter_status function could not get serial data')

    else:
        if ( data[0] == '07' and data[1] == 'f3' ):
            if len(data) > 18:
                if int(data[18], 16) == 0:
                    FilterStatus = 'Ok'
                    FilterStatusBinary = 1
                elif int(data[18], 16) == 1:
                    FilterStatus = 'Full'
                    FilterStatusBinary = 0
                else:
                    FilterStatus = 'Unknown'
                    FilterStatusBinary = 0
                publish_message(msg=str(FilterStatus), mqtt_path='comfoair/filterstatus')
                publish_message(msg=int(FilterStatusBinary), mqtt_path='comfoair/filterstatus_binary')
                debug_msg('FilterStatus: {0}'.format(FilterStatus))
            else:
                warning_msg('get_filter_status data array too short')
        else:
            warning_msg('get_filter_status wrong ACK message')
            
def recon():
    try:
        mqttc.reconnect()
        info_msg('Successfull reconnected to the MQTT server')
        topic_subscribe()
    except:
        warning_msg('Could not reconnect to the MQTT server. Trying again in 10 seconds')
        time.sleep(10)
        recon()
        
def topic_subscribe():
    try:
        mqttc.subscribe("comfoair/on/set", 0)
        info_msg('Successfull subscribed to the comfoair/on/set topic')
        mqttc.subscribe("comfoair/speed/set", 0)
        info_msg('Successfull subscribed to the comfoair/speed/set topic')
        mqttc.subscribe("comfoair/comforttemp/set", 0)
        info_msg('Successfull subscribed to the comfoair/comforttemp/set topic')
        mqttc.subscribe("comfoair/ha_climate_mode/set", 0)
        info_msg('Successfull subscribed to the comfoair/ha_climate_mode/set topic')
        mqttc.subscribe("comfoair/ha_climate_mode/fan/set", 0)
        info_msg('Successfull subscribed to the comfoair/ha_climate_mode/fan/set topic')
    except:
        warning_msg('There was an error while subscribing to the MQTT topic(s), trying again in 10 seconds')
        time.sleep(10)
        topic_subscribe()

def on_connect(client, userdata, flags, rc):
    publish_message("online","comfoair/status")
    if HAEnableAutoDiscoveryFan is True : 
        info_msg('Home Assistant MQTT Autodiscovery Topic Set: homeassistant/fan/ca350_fan/config')
        publish_message('{"name":"ca350_fan","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","stat_t": "comfoair/on/state","cmd_t": "comfoair/on/set","spd_stat_t": "comfoair/speed/state","spd_cmd_t": "comfoair/speed/set","pl_on": "20","pl_off": "10","pl_lo_spd": "20","pl_med_spd": "30","pl_hi_spd": "40","spds": ["off","low","medium","high"]}',"homeassistant/fan/ca350_fan/config")
    else:
        delete_message("homeassistant/climate/ca350_fan/config")
    if HAEnableAutoDiscoverySensors is True : 
        info_msg('Home Assistant MQTT Autodiscovery Topic Set: homeassistant/sensor/ca350_[nametemp]/config')
        publish_message('{"name":"ca350_outsidetemp","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","device_class":"temperature","state_topic":"comfoair/outsidetemp","unit_of_measurement":"°C"}',"homeassistant/sensor/ca350_outsidetemp/config")
        publish_message('{"name":"ca350_supplytemp","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","device_class":"temperature","state_topic":"comfoair/supplytemp","unit_of_measurement":"°C"}',"homeassistant/sensor/ca350_supplytemp/config")
        publish_message('{"name":"ca350_exhausttemp","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","device_class":"temperature","state_topic":"comfoair/exhausttemp","unit_of_measurement":"°C"}',"homeassistant/sensor/ca350_exhausttemp/config")
        publish_message('{"name":"ca350_returntemp","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","device_class":"temperature","state_topic":"comfoair/returntemp","unit_of_measurement":"°C"}',"homeassistant/sensor/ca350_returntemp/config")
        publish_message('{"name":"ca350_fan_speed_supply","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/intakefanrpm"}',"homeassistant/sensor/ca350_fan_speed_supply/config")
        publish_message('{"name":"ca350_fan_speed_exhaust","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/exhaustfanrpm"}',"homeassistant/sensor/ca350_fan_speed_exhaust/config")
        publish_message('{"name":"ca350_return_air_level","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/intakefanspeed"}',"homeassistant/sensor/ca350_return_air_level/config")
        publish_message('{"name":"ca350_supply_air_level","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/exhaustfanspeed"}',"homeassistant/sensor/ca350_supply_air_level/config")
        publish_message('{"name":"ca350_supply_fan","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/state"}',"homeassistant/sensor/ca350_supply_fan/config")
        publish_message('{"name":"ca350_filterstatus","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/filterstatus_binary"}',"homeassistant/binary_sensor/ca350_filterstatus/config")
        publish_message('{"name":"ca350_bypass_valve","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/bypassstatus"}',"homeassistant/binary_sensor/ca350_bypass_valve/config")
        publish_message('{"name":"ca350_summer_mode","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","state_topic":"comfoair/bypassstatus"}',"homeassistant/binary_sensor/ca350_summer_mode/config")
    else:
        delete_message("homeassistant/sensor/ca350_outsidetemp/config")
        delete_message("homeassistant/sensor/ca350_supplytemp/config")
        delete_message("homeassistant/sensor/ca350_exhausttemp/config")
        delete_message("homeassistant/sensor/ca350_returntemp/config")
        delete_message("homeassistant/sensor/ca350_fan_speed_supply/config")
        delete_message("homeassistant/sensor/ca350_fan_speed_exhaust/config")
        delete_message("homeassistant/sensor/ca350_return_air_level/config")
        delete_message("homeassistant/sensor/ca350_supply_air_level/config")
        delete_message("homeassistant/sensor/ca350_supply_fan/config")
        delete_message("homeassistant/sensor/ca350_filterstatus/config")
        delete_message("homeassistant/sensor/ca350_bypass_valve/config")
        delete_message("homeassistant/sensor/ca350_summer_mode/config")
    #ToDo: Work in progress    
    if HAEnableAutoDiscoveryClimate is True : 
        info_msg('Home Assistant MQTT Autodiscovery Topic Set: homeassistant/climate/ca350_climate/config')
        publish_message('{"name":"ca350_climate","avty_t":"comfoair/status","pl_avail":"online","pl_not_avail":"offline","temp_cmd_t":"comfoair/comforttemp/set","temp_stat_t":"comfoair/comforttemp","curr_temp_t":"comfoair/supplytemp","min_temp":"15","max_temp":"27","temp_step":"1","modes":["off", "fan_only"],"mode_state_topic":"comfoair/ha_climate_mode","mode_command_topic":"comfoair/ha_climate_mode/set","fan_modes":["off", "low", "medium", "high"],"fan_mode_state_topic":"comfoair/ha_climate_mode/fan","fan_mode_command_topic":"comfoair/ha_climate_mode/fan/set","temperature_unit":"C"}',"homeassistant/climate/ca350_climate/config")
    else:
        delete_message("homeassistant/climate/ca350_climate/config")
    topic_subscribe()
    
def on_disconnect(client, userdata, rc):
    if rc != 0:
        warning_msg('Unexpected disconnection from MQTT, trying to reconnect')
        recon()

### 
# Main
###

# Connect to the MQTT broker
mqttc = mqtt.Client('CA350')
if  MQTTUser != False and MQTTPassword != False :
    mqttc.username_pw_set(MQTTUser,MQTTPassword)

# Define the mqtt callbacks
mqttc.on_connect = on_connect
mqttc.on_message = on_message
mqttc.on_disconnect = on_disconnect
mqttc.will_set("comfoair/status",payload="offline", qos=0, retain=True)


# Connect to the MQTT server
while True:
    try:
        mqttc.connect(MQTTServer, MQTTPort, MQTTKeepalive)
        break
    except:
        warning_msg('Can\'t connect to MQTT broker. Retrying in 10 seconds.')
        time.sleep(10)
        pass

# Open the serial port
try:
    ser = serial.Serial(port = SerialPort, baudrate = 9600, bytesize = serial.EIGHTBITS, parity = serial.PARITY_NONE, stopbits = serial.STOPBITS_ONE)
except:
    warning_msg('Opening serial port exception:')
    warning_msg(sys.exc_info())
else:
    if enablePcMode == True : 
       set_pc_mode(3)

    mqttc.loop_start()
    while True:
        try:
    #        get_ventilation_levels()
    #        set_fan_levels()
            get_temp()
            get_ventilation_status()
            get_filter_status()
            get_fan_status()
            get_bypass_status()
            time.sleep(refresh_interval)
            pass
        except KeyboardInterrupt:
            mqttc.loop_stop()
            ser.close()
            break

    
# End of program
